<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>马野先生</title>
    <link>/</link>
    <description>Recent content on 马野先生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Thu, 06 May 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>万字好文：某三线城市年薪20万产品总监的面试题</title>
      <link>/post/2021-05-06-%E4%B8%87%E5%AD%97%E5%A5%BD%E6%96%87%E6%9F%90%E4%B8%89%E7%BA%BF%E5%9F%8E%E5%B8%82%E5%B9%B4%E8%96%AA20%E4%B8%87%E4%BA%A7%E5%93%81%E6%80%BB%E7%9B%91%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021-05-06-%E4%B8%87%E5%AD%97%E5%A5%BD%E6%96%87%E6%9F%90%E4%B8%89%E7%BA%BF%E5%9F%8E%E5%B8%82%E5%B9%B4%E8%96%AA20%E4%B8%87%E4%BA%A7%E5%93%81%E6%80%BB%E7%9B%91%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 coffee.pmcaff.com
 《简介》 某同学去申请了一份三线城市的产品总监职位，在初步沟通后，对方发来一套试卷，要求在30分钟内完成提交。那么针对20万薪资的要求，来看下题目和回答之间的关联性。（有些涉及到个人隐私的会做一些更改）。 以下回答共用时40分钟（不含最后一题），然后写思考，适当的修改答案，重新写最后一题共用时4个小时。
1、为什么离开上家公司？为什么要做产品？自己有哪些特质适合做产品？ 思考：关于一个题目中有多个问题，需要分别去回答。离职的原因不外乎是需要受了委屈、钱少、距离家远、想要换个行业这些条件，但回答肯定不能这么直白，而且后面的问题还是针对你要跨行业来说明，所以回答时做一个区分和关联。
答：上家公司的这条产品线已经停了，后面要我转岗负责销售业务，我个人希望一直从事产品方向，和公司协商不行，所以提了离职。我前面做了2年的设计管理，在做设计师时我发现自己对于业务逻辑的梳理、功能应用的定义特别擅长，公司的研发和沟通也很顺畅，我们经常会解决一些产品只提了更改但无交互的需求。基于这点，我后面专门去学了产品的课程，也关注了《产品经理有话说》，每天跟着学习产品思维，自己也会输出大量的内容来提升自己。
2、产品经理的主要职责是什么？你读过哪些产品相关的书籍？ 思考：产品经理简单一点就是干活的，升级一点就是做管理，再升级一点就是做战略规划，那么职责首先是标准地完成安排的任务内容，然后在是拓展业务了。关于书籍，一般要说知名一点的书，然后加一点自我的见解，便于话题的开展。关于学习，可以有很多的书来阅读，这里要看个人习惯。
答：作为产品总监工作主要有3块内容。1做好规划和方向定义，这里要结合公司的指令做任务拆解和安排，同时要思考大局观和业务价值，核算投入产出比，定义产品的商业价值，如何配合其他部门做好业务输出。
答：2做好管理工作，身为管理者，带好团队是必备的核心技能，必须要对管理的对象进行深入有效的了解，然后根据每个人的特色进行有效的措施进行管理，才能发挥他们各自最大的价值。
答：3做好自我的执行工作，总监并不是一个单纯的管理者，也需要亲自做业务落地的事情，要比手下的人更熟悉产品的业务流程，了解业务之间的关联关系，并且能够解决各种问题。
答：一般会去看下畅销榜上面的书籍，并不局限于产品，还有涉及到心理学、营销、行业方面的。最近刚购买了《独具匠心-做最小可行性产品》。书中主要是在讲MVP的模式，借助于“MVP”思维、理念、原则及价值观对产品创新全生命周期进行了详细介绍，讲述掌握MVP方法、实践和业务结合应用。
3、产品经理常用的分析模型有哪些？ 思考：分析一般指市场、数据、用户这三个方向，这里是要考验你的行业知识能力，之前是否有在做管理和针对大局观进行思考。针对总监这个职位，日常的一部分工作就是思考，需要看待各种问题的出现，以及对应的解决方案。回答的内容尽量做关联性，这样可以互补说明。这里还要看你回答的侧重点，比如我比较侧重于交互和数据，就做如下回答：
答：用户分析：“不仅要知道用户当下在想什么，更要知道用户背后在想什么，以及用户正在经历着什么”。一般可以使用用户画像来做定义，去给用户打标签，针对用户当前所处的场景定义：拉新、转化、购买、活跃、推荐等行为定义。
答：漏斗营销：是帮助分析在整个生命周期过程中每一步转化和流失情况。对应前面说的获客、激活、库存、变现、传播，这样可以从产品业务角度将重要的用户行为标注出来，以便可以在分析时方便、快捷地查找常用、重要的事件。
答：业务链路分析：通常是从市场、业务、销售的角度去考虑，对用户在产品应用的每个模块的流转情况，挖掘用户的访问模式，从而优化产品的业务功能。重点是要做到分析从挖掘用户，到查看产品详情，到最终支付每一步的转化情况。
4、如何对需求进行分级，常用的技巧有哪些？ 思考：关于选择，其实很多的时候并没有那么多的思考，方法论只是方法论，更多的是是基于本能的思考。好的产品负责人，需要考虑企业内部资源全局的运营，要考虑实现这些需求带来的业务价值，所需的成本。不同的产品人会使用不同策略方式，这种问题没有最优解，只有当时定义的最适合。
答：分级一般要从目标、问题、解决方案三个方面去考虑，同时定义先做核心需求-商品模块，先做紧急需求-用户购买流程，先做高转化低成本需求-第三方登录，先做收益高的需求-支付业务。
答：使用的方法一般是KANO模型、波士顿矩阵、量本利分析法。
答：另外我还会考虑企业的内部资源情况，确保事事可落地，紧急优先排，避免出现资源空闲的情况。 按获得收益，少，一般，多 按需求实现成本，容易，一般，难 按紧急程度，非常紧急，紧急，一般 按需求重要性，核心需求，次要需求，一般需求
5、Axure使用时长和熟练程度如何？最满意的作品是什么？简要分析其用户群体。 思考：关于工具的使用，基本上三天就可以熟练上手，基础的操作大家都会，不外乎的是缺乏熟练的应用。所以这里招聘的是总监，却又在问应用工具，那么就说明这个职位还是有需要实际干活的，并不多是管理和规划。同时通过作品的说明，也可以考察出你对于功能、对于业务是如何定义、理解的。如果平时不用Axure用其他的工具，前面直接一句说明就可以，关键是要讲述后面的内容。
答：Axure只是一个工具，我常用来设计产品的界面展示、业务流程、交互说明。在没有设计师的情况下，我会直接做出高保真，这样确认交互后就可以直接进入研发。我前面设计了一个阅读打卡的小程序交互，这个交互应用的很舒服，区别于其他的打卡，在打卡的界面直接推荐客户放置在桌面提醒，并且图标会显示为你定时的时间戳，这样在你开启手机应用时就会第一时间看到。而且时间还可以根据当天的临近结束时间进行识别，在最后一个小时、30分钟、10分钟连续提醒，督促你完成。
答：其实定时定量打卡很难，用户很难坚持下来，那么主动提示就是一个很好的交互。在小程序里还可以设定组队，第一打卡人完成后，接着就会提醒后面未打卡的人。提醒也会区分上班时，毕竟很多的时候不方便去做私事。当你落后几次后，定时就会在超前的时间主动提醒你，激发用户的好胜心，促进用户去完成。
6、从市场、研发、用户的三个角度简要分析小程序、IOS、Android的区别。 思考：业务场景的应用有多种多样，究竟什么样的才是适合用户的，这里不能单纯依靠市场反馈，还要根据用户画像做定义，通过数据来区分。当你觉得你无法做决策时，就可以拿真实的数据来说话，数据是不会说谎的。小程序一般指微信内，毕竟这个使用场景多（也有支付宝等其他的平台），而IOS和Android则是独立应用，这个就是涉及到业务场景的定义了。
答：首先要看这个应用中产品具体是做什么的。比如瑞幸咖啡，既有独立的APP也有在微信内的小程序，两者既独立又相互补充。
答：从市场的角度来说，轻应用的、低频的操作当然是小程序内实现比较好。在考虑市场应用，希望有分销层级、希望个性化设定时就可以采用APP的方式。从研发的角度来说，只要需求能够梳理清楚，研发就可以完成功能实现。从用户的角度来说，应用场景可以多样化，但核心点在于所需的内容是否具备独立性，比如买咖啡一天一次，或者一天两次，那么使用APP的话，用户操作的关联性比较差。
答：关于IOS和Android，一般来说是两者都要上的，比如电商的APP、比如游戏的APP。这类应用的复杂程度是小程序解决不了的，所以需要独立开发。还有就是因为APP内部的功能、内容由运营者全权把控，可以由运营来定义游戏的规则，这样自主权更大。
答：Android系统是开源的，相对功能的升级应用，开放性更强，但要适应的机型就要有很多；IOS固定几种机型。另外就是IOS使用Objective-C语言，而Android采用的Java语言，两者之间还一个执行效率的问题。
7、现在公司需要你设计一套规范的产品版本序列号，请说明设计思路。 思考：版本号不外乎就是一串数字，那么关于展示方式，是可以评判出你日常的业务规划和是否有调整的对工作进行安排。一个干净、整洁、有责任心的人，是会按照规范的条例去做执行。另外就是看你在做产品规划设计时是否有条理，是否能够有序地安排团队去做事。
答：一般版本号分5个节点。1主版本号主要是较大改动、创新应用、阶段性任务完成后进行调整。2子版本号主要是业务功能模块修改，功能升级，一般按照周期进行定义。3阶段版本号是指在子版本中进行拆分的定义，毕竟开发时间过长，不利于即时性/有时也需要临时修改BUG。4是日期定义，这里会定义更新日期，用于记录修改的功能。5是版本属性的定义，比如测试版、base版、专属版等，这会针对专属场景进行说明。
答：通过版本号，可以协助产品迭代管理，在需求池中，定义需求对应的版本可以有序对产品进行归类。同时版本号也可以用S标示最高优先级，用B来标示是BUG修复，项目组的成员也可以通过版本号来理解版本的定义。
8、请你说明下MVP的含义和案例。 思考：MVP的概念是最小可行性分析，除创业公司和紧急项目外，一般这种口号喊的比较多，实际用的比较少，毕竟紧急堆出来一个产品，有点四不像的样子，也没办法很好的体现大家的工作量。生活中有太多的例子可以说明了，区别是在于，你对于这件事情的定义如何，就拿注册来说，为了获取用户的信息，手机号注册很重要，但一定是要在第一步开始吗？这里还一个概念，是要看你的决策能力，是不是什么需求都能接，什么都要安排。
答：先说MVP的概念，是指在产品诞生的过程中，除去多余的步骤，只保持必要功能来进行市场、用户的验证。
答：比如我们是做熟人社交的，那么注册这步就可以省略掉，重点要放在通讯录的获取、对话、传播这三步操作中。如果是陌生人社交，那么需要启用第三方登录，这里先不用手机号/账号注册的目的是为了缩短一步，通过授权，用户可以更快的进入界面中进行活跃。特别是遇到地推的情况下，避免用户因等待而流失，一旦用户不能在现场完成操作，后面很容易就遗忘，那么注册这个界面就是这个产品的障碍。
9、你认为互联网中下一个“风口”会是什么？ 思考：风口这种东西，如果是涉及到资本市场，那真的不好说。现在连兰州拉面都能做品牌融资了，你说还有什么不能在风口上飞起来呢，只要资本够大，猪都能飞起来——雷军。还一个，作为总监，势必会参与到资本啊、方向之类的定义对吧，那么这块就是你公司的业务发展路线。这里要看你比较擅长的行业，在擅长的赛道里面去玩，你就可以良好的展示自己，发挥自己的优势，借用人脉关系。
答：我认为每一个行业点都可以成为一个风口，不过就是有些已经起风了，有些还没开始。就像现在造车是一个风口，巨头都在造车，但基于整车制造之外的业务延伸呢？比如智能座舱、自动驾驶、数字化营销、充电桩、人机交互、触控屏等这些都是可以去深耕下去的行业。
答：比如我们教育行业，在以后自动驾驶成熟后，父母就可以和孩子一起在车内进行教学互动，可以背单词、可以查看今天的作业等交互应用，那么这个前提就是要提前应对好新行业中的应用，新的环境、新的场景、新的交互。虽然现在第二波教育行业的浪潮已经打过来了，但细分赛道中，还是大有可为的。
10、数据分析对产品有哪些帮助？你日常是如何定义数据分析的？ 思考：作为一个管理层，你的另外一个重要任务就是做数据分析。最直观的应用，即利用数据分析实现数字化精准营销。通过深度分析用户购买行为、消费习惯等，刻画用户画像，将数据分析结果转化为可操作执行的客户管理策略，以最佳的方式触及更多的客户，以实现销售收入的增长。
答：1、积极主动和预测需求 2、大数据对精细化运营的价值 3、缓冲风险减少欺诈 4、通过大数据能让企业有效激活用户 5、个性化服务
答：一般内部是通过数据埋点，针对专属的功能和特定的业务定义数据分析。外部是采用第三方的数据分析。主要是看数据结果，查看数据业务流程分析，查看高频数据，多维度数据来源分析、业务分析报告和数据可视化报告。
11、用户调研的意义是什么？具体方法有哪些？ 思考：用户调研，不光是说调研，不光是说分析，还要考虑市场情况、业务情况、用户情况、行为习惯、付费习惯、竞品法则。
答：结合上题，和上司打交道时，务必要提供数据和事实，如果单纯依靠个人看法，那就是臆断。多做准备工作，收集事实和数据，你的建议才更加有说服力。那么用户调研，就是给用户做画像，定义用户行为，做用户数据划分，针对结果去修正。
答：使用优秀的从产品，能够给用户非常大的精神愉悦，每个从产品设计的细节，都能让用户体会到设计团队的“用心”、“良质”、“专注”，我做产品最大的心愿就是和用户做一个跨越时空的击掌，打磨出给用户带来惊喜和幸福感的产品。
答：常规的方法是用户调研、用户访谈、埋点、数据分析，其实还有用户主动反馈，当用户觉得你不错，觉得你用心，用户会主动的帮助你提升，你需要耐心的倾听，你需要安抚好用户，你需要拆分出用户反馈之后的思考。
12、请举例你理解生活细节产出产品的实例 思考：产品来自于生活，生活来自于细节，在C端的场景中，考虑用户就是考虑更多的细节的应用。C端和B端最大的区别是C端以用户为中心，为满足去做提升。用户需要爽，就要给用户更多的爽点，用户嗨了，自然就升级为忠实用户。</description>
    </item>
    
    <item>
      <title>服务端高并发分布式架构演进之路</title>
      <link>/post/2020-10-23-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%AB%98%E5%B9%B6%E5%8F%91%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-10-23-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%AB%98%E5%B9%B6%E5%8F%91%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 segmentfault.com
  概述   本文以淘宝作为例子，介绍从一百个到千万级并发情况下服务端的架构的演进过程，同时列举出每个演进阶段会遇到的相关技术，让大家对架构的演进有一个整体的认知，文章最后汇总了一些架构设计的原则。
 特别说明：本文以淘宝为例仅仅是为了便于说明演进过程可能遇到的问题，并非是淘宝真正的技术演进路径
 基本概念   在介绍架构之前，为了避免部分读者对架构设计中的一些概念不了解，下面对几个最基础的概念进行介绍：
 分布式
系统中的多个模块在不同服务器上部署，即可称为分布式系统，如 Tomcat 和数据库分别部署在不同的服务器上，或两个相同功能的 Tomcat 分别部署在不同服务器上 高可用
系统中部分节点失效时，其他节点能够接替它继续提供服务，则可认为系统具有高可用性 集群
一个特定领域的软件部署在多台服务器上并作为一个整体提供一类服务，这个整体称为集群。如 Zookeeper 中的 Master 和 Slave 分别部署在多台服务器上，共同组成一个整体提供集中配置服务。在常见的集群中，客户端往往能够连接任意一个节点获得服务，并且当集群中一个节点掉线时，其他节点往往能够自动的接替它继续提供服务，这时候说明集群具有高可用性 负载均衡
请求发送到系统时，通过某些方式把请求均匀分发到多个节点上，使系统中每个节点能够均匀的处理请求负载，则可认为系统是负载均衡的 正向代理和反向代理
系统内部要访问外部网络时，统一通过一个代理服务器把请求转发出去，在外部网络看来就是代理服务器发起的访问，此时代理服务器实现的是正向代理；当外部请求进入系统时，代理服务器把该请求转发到系统中的某台服务器上，对外部请求来说，与之交互的只有代理服务器，此时代理服务器实现的是反向代理。简单来说，正向代理是代理服务器代替系统内部来访问外部网络的过程，反向代理是外部请求访问系统时通过代理服务器转发到内部服务器的过程。  架构演进   3.1 单机架构 以淘宝作为例子。在网站最初时，应用数量与用户数都较少，可以把 Tomcat 和数据库部署在同一台服务器上。浏览器往 www.taobao.com 发起请求时，首先经过 DNS 服务器（域名系统）把域名转换为实际 IP 地址 10.102.4.1，浏览器转而访问该 IP 对应的 Tomcat。
 随着用户数的增长，Tomcat 和数据库之间竞争资源，单机性能不足以支撑业务
 3.2 第一次演进：Tomcat 与数据库分开部署 Tomcat 和数据库分别独占服务器资源，显著提高两者各自性能。
 随着用户数的增长，并发读写数据库成为瓶颈</description>
    </item>
    
    <item>
      <title>Spring Bean工作原理详解</title>
      <link>/post/2020-09-01-spring-bean-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-09-01-spring-bean-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 www.cnblogs.com
  本文 Github 开源项目 https://github.com/Snailclimb/JavaGuide，只供自己学习总结无商业用途，如有侵权，联系删除
 前言 在 Spring 中，那些组成应用程序的主体及由 Spring IOC 容器所管理的对象，被称之为 bean。简单地讲，bean 就是由 IOC 容器初始化、装配及管理的对象，除此之外，bean 就与应用程序中的其他对象没有什么区别了。而 bean 的定义以及 bean 相互间的依赖关系将通过配置元数据来描述。
Spring 中的 bean 默认都是单例的，这些单例 Bean 在多线程程序下如何保证线程安全呢？ 例如对于 Web 应用来说，Web 容器对于每个用户请求都创建一个单独的 Sevlet 线程来处理请求，引入 Spring 框架之后，每个 Action 都是单例的，那么对于 Spring 托管的单例 Service Bean，如何保证其安全呢？ Spring 的单例是基于 BeanFactory 也就是 Spring 容器的，单例 Bean 在此容器内只有一个，Java 的单例是基于 JVM，每个 JVM 内只有一个实例。
bean 的作用域 创建一个 bean 定义，其实质是用该 bean 定义对应的类来创建真正实例的 “配方”。把 bean 定义看成一个配方很有意义，它与 class 很类似，只根据一张“处方” 就可以创建多个实例。不仅可以控制注入到对象中的各种依赖和配置值，还可以控制该对象的作用域。这样可以灵活选择所建对象的作用域，而不必在 Java Class 级定义作用域。Spring Framework 支持五种作用域，分别阐述如下表。</description>
    </item>
    
    <item>
      <title>《走向共和》有哪些会误导人的错误</title>
      <link>/post/2020-07-16-%E8%B5%B0%E5%90%91%E5%85%B1%E5%92%8C%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%9A%E8%AF%AF%E5%AF%BC%E4%BA%BA%E7%9A%84%E9%94%99%E8%AF%AF/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-07-16-%E8%B5%B0%E5%90%91%E5%85%B1%E5%92%8C%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%9A%E8%AF%AF%E5%AF%BC%E4%BA%BA%E7%9A%84%E9%94%99%E8%AF%AF/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 www.zhihu.com 杨爱红
 说一个不在《走向共和》剧情之内、而在其剧情之外的大误会。
我印象中知乎上有过关于 “《走向共和》为何被禁” 的讨论（可惜我刚搜了一下只搜到了几篇毫无营养的你抄我我抄你的文章），不少大 V 级知友也参与过那场讨论，最后得到普遍赞成的观点大致有这么两点：
第一，《走向共和》制作方发行方非常非常牛 X、非常非常官方，连主题歌都是 XXX 和 XXX 唱的，根本不可能被禁。
第二，这部剧拍得太好了、太神了，但叫好不叫座、收视率惨淡，所以后来就没有电视台播了，这是个商业问题而不是政治问题。
我曾长期以为上面这两点就是全部真相了，直到今天偶然看到这篇《张海鹏发言：在重大意识形态问题上不能含含糊糊、遮遮掩掩》。
提示信息 - 红歌会网 - 手机版​m.szhgh.com
这篇文章讲清楚了《走向共和》从湖南台到央视播出的前因后果：
还讲清楚了为什么央视播完《走向共和》之后就再无电视台播放这部剧：
此文作者张海鹏，是社科院学部委员、曾任中国史学会会长，文中提到的名字（也就是我打马赛克的部分）层级非常高，想来这篇文章应该没有撒谎。所以事情很清楚了：《走向共和》确确实实被禁了，而且确确实实是因为政治不正确而被禁的。
这里我不打算讨论这部剧是不是真的政治不正确、也不打算讨论国朝对文艺作品管制的正当性；我想说的是，从知友们对 “《走向共和》被禁” 一事的误解来看，很多人还有更大一层的误解，即把 XX 当作铁板一块、认为有了谁谁谁的背书就一定代表 XX 的意志。
——其实不是的，XX 并不是铁板一块，其内部始终充满了不同集团、不同人之间的博弈（用老话来讲就是 “路线斗争”）。这也是文艺作品管制黑箱化、玄学化的根本原因：管制者自己都精神分裂、云里雾里，自然不可能指望它以其昏昏、使人昭昭。
（这样的铁板一块式误解，倒是跟《走向共和》对日本亿兆同心式的夸张描绘异曲同工啊 23333
顺便一提，湖南方面对《走向共和》可真是念念不忘：
省委书记给 600 多位 “90 后”“00 后” 作报告：人家 “富二代” 都在拼命奋斗，你有什么理由不奋斗？​mp.weixin.qq.com
下面这段真是讲得太有道理了：
马伯庸​
当年我第一次看《走向共和》，看到第 23 集时最为震惊。这一集主要讲的是戊戌六君子就义。谭嗣同慨然吟出一首绝命诗：
等等，这首诗跟我小时候背的不一样啊。别的不说，“我自横刀向天笑，去留肝胆两昆仑”，这是多脍炙人口的名句啊。
接下来，康有为、梁启超在海外召开记者会，在会上梁启超动情地谈起了谭嗣同的绝命诗：
这回的词儿总算是我熟悉的了，可剧情上却前后不一致。到底谭嗣同写的是哪一首啊？
突然，记者群里跳出一个叫王照的人，直斥梁启超为了争取同情，篡改了谭嗣同的诗。
这可真是令人震惊了，原来谭嗣同那么有名的诗，居然是伪造的。这可真是令人玩味的历史真相。
剧中说破这件事的王照，并非虚构人物。百日维新中，他担任礼部主事，因直言顶撞上司，咆哮公堂，却得到光绪帝赞赏，革了礼部六位堂官。戊戌变法失败之后，他也逃到了日本，却和康、梁分道扬镳，到处对人说康、梁各种为了宣传而造假的事情，并披露了很多变法内幕。后世研究戊戌，王照的回忆也是重要的史料来源。
虽然在史实上，王照没有在记者会上直斥过梁启超，也没提出过谭嗣同伪诗论，但编剧把这个人物安排在这里，恰如其分，是下过功夫的。
那么，这个梁启超伪造谭诗的桥段，是编剧原创的吗？
不是。
这个伪诗的说法，是出自《温故戊戌年》转引的台湾学者黄彰健《戊戌变法史研究》。
那么黄彰健又是从何而知呢？
按照黄彰健在《论今传谭嗣同狱中题壁诗曾经梁启超改易》这一章的考据，他找到了一本出版于光绪三十四年的《绣像康梁演义》，里面说六君子伏法之前，林旭忽然吟了两首诗：</description>
    </item>
    
    <item>
      <title>Git Fetch &amp; Pull 详解</title>
      <link>/post/2020-07-13-git-fetch-pull-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-07-13-git-fetch-pull-%E8%AF%A6%E8%A7%A3/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 www.cnblogs.com
 1、简单概括 先用一张图来理一下git fetch和git pull的概念：
可以简单的概括为：
git fetch是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中。
而git pull则是将远程主机的最新内容拉下来后直接合并，即：git pull = git fetch + git merge，这样可能会产生冲突，需要手动解决。
下面我们来详细了解一下git fetch和git pull的用法。
2、分支的概念 在介绍两种方法之前，我们需要先了解一下分支的概念： 分支是用来标记特定代码的提交，每一个分支通过 SHA1sum 值来标识，所以对分支的操作是轻量级的，你改变的仅仅是 SHA1sum 值。
如下图所示，当前有 2 个分支，A,C,E 属于 master 分支，而 A,B，D,F 属于 dev 分支。
A----C----E（master） \  B---D---F(dev) 它们的 head 指针分别指向 E 和 F，对上述做如下操作：
git checkout master //选择or切换到master分支 git merge dev //将dev分支合并到当前分支(master)中 合并完成后：
A---C---E---G(master) \  / B---D---F（dev） 现在 ABCDEFG 属于 master，G 是一次合并后的结果，是将 E 和Ｆ的代码合并后的结果，可能会出现冲突。而 ABDF 依然属于 dev 分支。可以继续在 dev 的分支上进行开发:</description>
    </item>
    
    <item>
      <title>Git Rebase 原理</title>
      <link>/post/2020-07-13-git-rebase-%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-07-13-git-rebase-%E5%8E%9F%E7%90%86/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 segmentfault.com
  原文地址
Git 系列文章地址
 本文主要讲解下 Git Rebase 的基本概念用法、其内部原理以及我们在真实项目中使用 Git Rebase 应该遵循的原则以及为啥需要遵循这些原则。
相信对于 rebase 肯定不会陌生，就好像上图描述的过程一样，当你使用 rebase 命令的时候，即好像将你需要去 rebase 的分支拔下来然后重新插到另一个分支上。官方对于 rebase 的描述为：
“git-rebase: Forward-port local commits to the updated upstream head”— git doc 翻译一下，就是讲你在某个分支上的所有提交记录移花接木到另一个分支上。这边需要强调一个概念：reapply，使用 rebase 并不是简单地好像你用 ctrl-x/ctrl-v 进行剪切复制一样，rebase 会依次地将你所要操作的分支的所有提交应用到目标分支上。也就是说，实际上在执行 rebase 的时候，有两个隐含的注意点：
  在重放之前的提交的时候，Git 会创建新的提交，也就是说即使你重放的提交与之前的一模一样 Git 也会将之当做新的独立的提交进行处理。
  Git rebase 并不会删除老的提交，也就是说你在对某个分支执行了 rebase 操作之后，老的提交仍然会存放在. git 文件夹的 objects 目录下。如果你对于 Git 是如何存放你的提交不太了解的话可以参考这篇文章：Understanding git for real by exploring the .</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>/about/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>不忘初心，砥砺前行 </description>
    </item>
    
    <item>
      <title>如何想静静-谢益辉</title>
      <link>/post/2020-07-05-%E5%A6%82%E4%BD%95%E6%83%B3%E9%9D%99%E9%9D%99-%E8%B0%A2%E7%9B%8A%E8%BE%89/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-07-05-%E5%A6%82%E4%BD%95%E6%83%B3%E9%9D%99%E9%9D%99-%E8%B0%A2%E7%9B%8A%E8%BE%89/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 yihui.org
 谢益辉 / 2019-07-19  约两周前有一位素不相识的文波兄来函，希望我写篇博客谈谈我如何静下心来研究一个东西，原因是他见我似乎产出颇丰：比如我作为一个非科班出身的码农，Github 打卡比他（专业码农）还勤得多，而且保持了六七年的满格；还有我自从 2005 年以来的这一两千篇中英文日志，看起来也有点厉害的样子。
这要分两头说。一方面是我真实的厉害与别人想象的我的厉害有多大差距，另一方面是我怎么做到把这些数字撑到远大于一般人的成绩。我觉得毫无疑问，别人到我的个人网站来溜达一圈，对我的实力评估肯定超出我真正的实力一大截。这些表面上的数字都有水分，比如有些 Github 打卡是自动的（我会每日自动编译一些包）、我写的日志里也有很多流水账、我简历页面上那超长一串演讲和报告几乎包含了我人生中所有的报告（包括课堂作业报告），所以初来乍到的客官们大可不必看了这些数量级后纳头就拜。
好了，挤掉部分水分后我们来谈谈静静的事情。为了我写起来方便，我就直接抄录邮件原文并就其各项问题逐一回应了。
 我看到您学业达到博士，这个必定花费很多时间精力。
 博士头衔应该只是个围城了，里面的人觉得也没什么，就是走个过程而已。多数人只要能被录取，最终应该都能混毕业。我读博的四年半时间里，全身心为这个博士头衔贡献的时间只有从归隐到出山的一个月。剩下的时间一小部分贡献给了熬夜赶作业，大部分贡献给了写代码和混迹统计之都网站，极小部分贡献给了写论文和看文献。这肯定不是一个正常博士的时间分配，因为我的所谓科研的比例低到几乎可忽略不计。毕业之后掰着指头一数，博士期间去过 25 个城市、做了 34 场报告。整体而言，我觉得还算比较轻松。现在想想，那时候只需要维护一两个 R 包，是多么幸福的事情。
 看到您 Github 从 2012 开始几乎都是满的，而我作为一个专业的程序员，居然没有您一般多，确实感受到了差距。而且我相信程序只是您的兴趣之一。
 王国维提了诗词三境界，我也提个码农三境界：我找事、找我事、事找我。这里我特指开源社区的码农，不包含在公司里闷头喂自己公司袋盐的码农。我想多数开源码农应该停留在第一阶段，就是找事情做。如果找对了事情，开始小有名气，就会开始有人来找你事，因为开源项目里没多少前无古人的纯原创项目；每个项目几乎一定有类似的其它项目已经存在，所以人家不免要来比天比地比空气。等你埋头把你的项目欠缺的功能都补齐、可以与竞争者一较高低之后，你便强大到 “事找我” 的程度了。一个项目的成功容易催化下一个项目的成功，因为你已经有了一定的眼光和经验积累。陷入这个正向循环后，就算想退出 Github 江湖都没那么容易了。江湖里的人会把你绑架，日复一日给你各种反馈，酸甜苦辣都有，簇拥你前行。现在先记住 “反馈” 这个词，下文再谈。
 还有您的博客更新多年，几千篇，这个也是我非常羡慕的，因为我也是有博客，但是一直拖拖拉拉，没有认真写几篇，反复挂掉又建最后又没去打理。
 我知道有些跑步的人会上瘾。我个人对跑步没有任何爱好，所以我完全无法理解枯燥的跑步怎么可能使人上瘾。同理，不打羽毛球的人若听说我可以一直打五小时的羽毛球，一定也很难理解：不就是拿个拍子把球抡过来抡过去吗，怎么能打整整一下午。我想说的是，写博客也一样，到一定量级之后会让人上瘾。可能是拜我们的语文教育所赐，我们被摁着头写了十几年的作文，便坚定地认为写东西是一件苦差事。世上存在那种哪怕没有任何甜头、甚至只有苦头也要坚持做一件事的人，但这样的人应该还是少数。多数人的坚持，应该还是有甜头的存在。现在记住 “甜头” 这个词。
 工作方面，看到您的简历，虽然非专业看不懂，但是相信必定是很有成果的。
 我已经多次鼓吹 “我网故我在” 的观点了，只是真正的响应者甚寡。很多人听我忽悠，随手搭个网站，但也就撂在那儿不管了。他们没听到我的后一句话：网站是用来积累成就的，而简历可以是成就的堆砌汇总处。最初可以从堆砌小成就开始，把你写的作业、拍的照片、做的菜肴统统发上来。勿以事小而不堆。很多小事的价值，要过很多年你才能发现（比如十一年）。除非你记忆力超群，否则凡是没有写下来的东西你很快就会忘，而你忘记的事情跟没做也没什么区别。换句话说，你差不多算是在白活。记住 “堆砌”。
 其实您自己觉得这些可能没什么，按部就班都会做到，但是我们一般人会觉得很难，可能专注力，毅力或者其他内在动力起到更重要作用，如果可以，很希望得到您的分享：
您每天作息时间是怎么样的？您如何利用时间，如何解决拖延问题，如何避免不必要的打扰（比如手机、家人孩子）？坚持做这些事情的动力（因为我看到您的最初的网站以及一些插件，您肯定没有预料到会有后面的这么多人重视以及重要性，最初做这些的动力）？
 注意力分散、拖延症基本上都是时代病，除非你归隐山林，否则很难治疗。我同样是这些时代病的患者，只不过可能病情略微轻一点而已。那些认为我光芒万丈、仿佛已经成圣成佛的人，不妨了解一下我前些年的挣扎。要说我跟众人有何不同的话，那就是多数心里苦的宝宝都不会说，而我会说。我知道那些表面光芒万丈、内心苦痛挣扎的宝宝绝对不在少数。我深信 “透明” 这个原则。我的多数所思所想所做，都是公开的。我个人极度讨厌人为树立的围墙，可理解、但绝不喜欢于淼大人文末提到的那种藏着掖着的人。
论毅力，它在我上大学本科期间已经逐渐消失了。在那之前，我还算有点毅力：严冬可以早起，炎夏可以背英汉词典。这是早年间寒门背景的驱动。现在已经过上了吃馒头想蘸红糖蘸红糖、想蘸白糖蘸白糖的富足生活，来自生理层面的驱动就没了。我的专注仅限于我的四大业余爱好：~吃喝嫖赌，哦说错了，是说学逗唱，哦不，~看书、写东西、做饭、打羽毛球。除此之外，我同样觉得保持专注很困难，这个时代的噪声源太多了。目前我唯一成功克制住的是社交媒体瘾：我已经关掉微信朋友圈近四年；今年我也克制住了推特，训练到可以看着那个新消息提醒的数字而偏偏就不点开它。但其实即使这样也是杯水车薪，仍然有太多噪声源，况且有些还不是纯噪声，是必须听以及必须处理的。
人人都一边说着想静静，一边又舍不得这光怪陆离、醉生梦死的红尘。空有转瞬即逝的迷茫，却没有倒退的勇气。只要陷在这个矛盾中，就不可避免会沦为他人的木偶，他想怎么牵引你就怎么牵引。在这里我得重提王维母亲那三个字：净、静、境。净的最大敌人是欲望，保留欲望就是保留被人挑逗的可能性。心理渴求赞扬，而又无法面对多数人都是平庸平凡平淡、无法得到强力赞扬的现实，于是只能靠别人在你美颜自拍下的敷衍点赞续命。物欲旺盛，便容易被洗脑、网购些根本用不到的东西堆在家里。若连基本的脸净和家净都做不到，哪会有闲暇想静静？静静需要五感皆空，而你回想一下，你上一次没看、没听、没吃、没闻、没触碰任何东西是在什么时候？恐怕五感已经尽被外物锁死，人已经没有了真正的无聊时间，所有时刻都被无孔不入的信息占满；上茅房时是几乎一定在看手机，开车时一定同时放着音乐或其它音频节目。
静静到底是谁？静静是有质量的输出。我眼中这个时代最大的问题就是每个人的输入太多，输出太少。我们总在被动接受输入，而无暇顾及输出。信息输入量太大，就像郭德纲常说的恶心笑话：金针菇进，金针菇出。人们仿佛出于生理本能，认为吃得越多，就长得越好，而不去想想吃下去的到底消化了没有。于是肥胖、拉稀者繁，肌肉者寡。我平日最不乐意见到的就是静默转发，也就是转发别人的文章，自己没一句评论，或者只有干瘪的几个字评论和千篇一律的表情符。若看完一样东西后什么也讲不出来，那转它作甚、是何意呢？孟庭苇的一首歌《风里的梦》中有不相关但相似的一问：
 太多别人的传说，为何没有我的梦？
 滚滚红尘和欲望并不一定是坏事。我在《迷茫与倒退》中也说过，人的弱点都有转化为优点的潜力。问题只不过是你想让别人利用你的弱点，还是你自己利用自己的弱点。现在我们来说第一个关键词：反馈。对毅力不那么超群的人来说，做事若要有持续动力的话，则外界反馈必不可少。反馈有几方面作用：一是满足虚荣（表面上是个弱点），因为有人可能会夸你；二是扩张你的视角，促使你想你本来没想到的东西，这可能会让你的成果越来越宏伟；三是培养做事的惯性，因为路人的反馈有持续性，若处理得当，能有滚雪球的效应。我每天都在 Github 打卡，主要就是我每天都会收到新的反馈。若这地方根本没人搭理我，我也很难持续打卡。相比之下，我早已不用 Facebook，自然也没什么人来给我反馈，所以它对我毫无吸引力，我也就没有任何动力去为谁去哪儿旅游、谁的晚饭吃了什么而操碎我的心了。同样我也极少看知乎，因为我非常排斥那里的总体氛围，也不觉得它对我有任何帮助，所以在那里别人很难给我反馈，我也就不会有兴趣去打卡。我倾向于看单对单的反馈，而不是群对单的反馈；当一大群人围上来的时候，反馈很容易失真。</description>
    </item>
    
    <item>
      <title>有什么让人一看就觉得 “这个人好有意思啊” 的文案</title>
      <link>/post/2020-07-05-%E8%AE%A9%E4%BA%BA%E4%B8%80%E7%9C%8B%E5%B0%B1%E8%A7%89%E5%BE%97-%E8%BF%99%E4%B8%AA%E4%BA%BA%E5%A5%BD%E6%9C%89%E6%84%8F%E6%80%9D%E5%95%8A-%E7%9A%84%E6%96%87%E6%A1%88/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-07-05-%E8%AE%A9%E4%BA%BA%E4%B8%80%E7%9C%8B%E5%B0%B1%E8%A7%89%E5%BE%97-%E8%BF%99%E4%B8%AA%E4%BA%BA%E5%A5%BD%E6%9C%89%E6%84%8F%E6%80%9D%E5%95%8A-%E7%9A%84%E6%96%87%E6%A1%88/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 www.zhihu.com 七七呀
   今年不想过了，麻烦退我一岁，谢谢
  听说女孩子说叠字很可爱？我我觉觉得得我我已已经经完完全全掌掌握握了了这这项项技技能能
  还有八个多月我就过生日了，现在吃个蛋糕不过分吧？
  大家以后还是远离我吧，我想清楚了，大家需要的是一个能经常逗笑你们的好姐妹，而不是我这样让人眼前一亮的美女
  有福同享，有肉你长
  其实我和别的公主都是一样的，每天都有骑士带着不同的吃的来看我，唯一不同的是，我的骑士要收配送费，有的三块有的五块
  我洗了个头，掉了不少头发，但我不伤心，因为我还有个头，而我的头却啥也没有
  我打王者：请求支援 请求支援
  我打和平：救救我 救救我
 为什么不理我？是想让我变成狗不理么？
  你摇摇头，听听有没有大海的声音
   有人别整天嘴那么碎，不服就来找我，我家住太平洋比基尼海滩比奇堡贝壳街 126 号的石头下面，我叫派大星
  和平精英我已经卸载了，主要是你们都金光闪闪，而我穿个棉袄戴个毛线帽显得非常格格不入
  打游戏么？我战绩再烂也不挂机，很有电竞精神，简称又菜又爱玩
  给你发的每一个字都是我竖着中指一个一个敲出来的
  刚刚撞到头失忆了，请问一下哪个是我的男朋友，我这么可爱应该不会是单身吧
  能不能给我发一毛钱，免得我们以后一毛钱关系都没有
  赛季第三天的排位也格外难打，微风吹过我的脸庞，我十分迷茫，我希望有人能看出我的逞强，让我卸下所有伪装，跟我说一句：废物，把号发过来
  拿得起放不下的是筷子，陷进去出不来的是被窝</description>
    </item>
    
    <item>
      <title>社保是不是只用缴满 15 年就可以不用交了</title>
      <link>/post/2020-05-23-%E7%A4%BE%E4%BF%9D%E6%98%AF%E4%B8%8D%E6%98%AF%E5%8F%AA%E7%94%A8%E7%BC%B4%E6%BB%A1-15-%E5%B9%B4%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%B8%8D%E7%94%A8%E4%BA%A4%E4%BA%86/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-05-23-%E7%A4%BE%E4%BF%9D%E6%98%AF%E4%B8%8D%E6%98%AF%E5%8F%AA%E7%94%A8%E7%BC%B4%E6%BB%A1-15-%E5%B9%B4%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%B8%8D%E7%94%A8%E4%BA%A4%E4%BA%86/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 https://www.zhihu.com/question/47845109 保贝说保
 相信我，这篇文章是全网给社保小白的一篇最干最全的科普文。
为了写这篇大文章，我花了将近一年的时间，调研了几百篇社保文章，义务回答了五六千条知乎网友的评论和私信，然后和各地社保部门打了几百个电话搜集资料，就是为了确保我写的每一条信息都准确，并真的用的上。
其实在写下这篇文章之前，社保五险一金下面的养老，医疗，生育和公积金，还有少儿医保等几乎每一个子命题，我都写出过六七千赞的文章。“框架一目了然，逻辑清晰，文字接地气，内容实用，超级无敌干燥的大干货” 这真的不是我自吹自擂，是网友在过往高赞文章下的评论，我会在这篇文章合适的子命题下插入这些高赞链接，大家都可以去看，并留言和我交流。
前面的每一篇子命题文章都耗了我少则一两个月，多则半年的时间，今天把这些高赞文章最精华的部分抽取出来，又加入了这半年的调研收集求证的新资料，组成了这最后一篇大文章，之所以这么做，是**我想帮大家建立一个完整的关于社保知识大框架体系，而不是输出碎片信息。**大家有什么问题，点我这篇文章树的社保框架，立马就可以得到自己要找的信息，再不用单个社保问题零碎的去搜索关键词然后还要过滤。
比如这位知乎网友问的问题，社保交 15 年是不是就不用再交了，你点开文中社保养老金部分，算的其实很明白，同样的固定的缴费基数，如果你只交够 15 那就要比交 25 年的，每月少领 760，一年就少领小 1 万块。
同样在医疗保险部分，也说的很清楚，有些地方医疗保险是要交够 25 年才能享受终身看病报销的，有的地方比如湖北男性都要交满 30 年才能享受看病终身报销，你只交 15 年肯定是不行的。
不管你是在读大学生，还是刚入职场的打拼族，第一次做父母的年轻爸妈，人到中年的社会老司机，甚至是马上就退休的叔叔阿姨，看病，生娃，换工作，领退休金，这些事情谁都逃不掉，那这篇文章将会和这些事情一样伴随你的整个职业生涯。
答应我，别只收藏，一定要记着抽空看（文章很长，陆续会耗费你两三个小时）。我敢肯定在你工作，生娃，住院，退休的某一个人生重要时刻，这篇文章一定会帮上你的大忙。在评论里，我真的见过，有的人生娃明明可以白领国家几万的生育津贴，仅仅因为当时不知道这个事情直接过期作废了，有的人买房硬是比别人多付两个点的利息，多花了十几万，亏不亏?
还有还有，如果你有其他疑问也可以在文章下给我留言，我会尽我所能帮你解答。并且会持续录入更新文章，以方便后来有和咱们一样社保问题的知乎新人。
文章主主要内容如下：
一、什么是社保五险一金？
二 、社保每月交多钱？
三 、社保到底有什么用？
1. 医保有什么用？
2. 生育保险有什么用？
3. 公积金有什么用？
4. 工伤保险有什么用？
5. 失业保险有什么用？
6. 养老金有什么用？
四、 关于社保大家最关心的其它问题
1. 职工交的五险一金和农村交的城居保（新农合）到底有什么差别？
2. 那到底是交城居保，还是交职工社保五险一金好呢？
3、社保或公积金断缴有什么影响？
4、社保没有交满 15 年怎么办？
5、自由职业者怎么交社保？交多少能领多少？
6、换城市工作，原来交的社保怎么办？
7、工作换了好几个城市，将来养老金按照哪个地方的标准领？
8、公司不给交社保怎么办？
9、已经 40-50 岁了，从来没参加过社保，还可以交吗？
10、医保交在老家，在大城市打工定居生活，万一生病住院了怎么办？</description>
    </item>
    
    <item>
      <title>百亿级微信红包的高并发资金交易系统设计方案</title>
      <link>/post/2020-05-19-%E7%99%BE%E4%BA%BF%E7%BA%A7%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E7%9A%84%E9%AB%98%E5%B9%B6%E5%8F%91%E8%B5%84%E9%87%91%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-05-19-%E7%99%BE%E4%BA%BF%E7%BA%A7%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E7%9A%84%E9%AB%98%E5%B9%B6%E5%8F%91%E8%B5%84%E9%87%91%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 https://www.infoq.cn/article/2017hongbao-weixin
 2017 年 1 月 28 日，正月初一，微信公布了用户在除夕当天收发微信红包的数量——142 亿个，而其收发峰值也已达到 76 万每秒。百亿级别的红包，如何保障并发性能与资金安全？这给微信带来了超级挑战。面对挑战，微信红包在分析了业界 “秒杀” 系统解决方案的基础上，采用了 SET 化、请求排队串行化、双维度分库表等设计，形成了独特的高并发、资金安全系统解决方案。实践证明，该方案表现稳定，且实现了除夕夜系统零故障运行。
本文将为读者介绍百亿级别红包背后的系统高并发设计方案，包括微信红包的两大业务特点、微信红包系统的技术难点、解决高并发问题通常使用的方案，以及微信红包系统的高并发解决方案。
一、微信红包的两大业务特点 微信红包（尤其是发在微信群里的红包，即群红包）业务形态上很类似网上的普通商品 “秒杀” 活动。
用户在微信群里发一个红包，等同于是普通商品 “秒杀” 活动的商品上架；微信群里的所有用户抢红包的动作，等同于 “秒杀” 活动中的查询库存；用户抢到红包后拆红包的动作，则对应 “秒杀” 活动中用户的 “秒杀” 动作。
不过除了上面的相同点之外，微信红包在业务形态上与普通商品 “秒杀” 活动相比，还具备自身的特点：
首先，微信红包业务比普通商品 “秒杀” 有更海量的并发要求。
微信红包用户在微信群里发一个红包，等同于在网上发布一次商品 “秒杀” 活动。假设同一时间有 10 万个群里的用户同时在发红包，那就相当于同一时间有 10 万个 “秒杀” 活动发布出去。10 万个微信群里的用户同时抢红包，将产生海量的并发请求。
其次，微信红包业务要求更严格的安全级别。
微信红包业务本质上是资金交易。微信红包是微信支付的一个商户，提供资金流转服务。
用户发红包时，相当于在微信红包这个商户上使用微信支付购买一笔 “钱”，并且收货地址是微信群。当用户支付成功后，红包“发货” 到微信群里，群里的用户拆开红包后，微信红包提供了将 “钱” 转入折红包用户微信零钱的服务。
资金交易业务比普通商品 “秒杀” 活动有更高的安全级别要求。普通的商品 “秒杀” 商品由商户提供，库存是商户预设的，“秒杀”时可以允许存在“超卖”（即实际被抢的商品数量比计划的库存多）、“少卖”（即实际被抢的商户数量比计划的库存少）的情况。但是对于微信红包，用户发 100 元的红包绝对不可以被拆出 101 元；用户发 100 元只被领取 99 元时，剩下的 1 元在 24 小时过期后要精确地退还给发红包用户，不能多也不能少。</description>
    </item>
    
    <item>
      <title>曹远征：中国现在还远未到财政赤字货币化的地步</title>
      <link>/post/2020-05-18-%E6%9B%B9%E8%BF%9C%E5%BE%81%E4%B8%AD%E5%9B%BD%E7%8E%B0%E5%9C%A8%E8%BF%98%E8%BF%9C%E6%9C%AA%E5%88%B0%E8%B4%A2%E6%94%BF%E8%B5%A4%E5%AD%97%E8%B4%A7%E5%B8%81%E5%8C%96%E7%9A%84%E5%9C%B0%E6%AD%A5/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-05-18-%E6%9B%B9%E8%BF%9C%E5%BE%81%E4%B8%AD%E5%9B%BD%E7%8E%B0%E5%9C%A8%E8%BF%98%E8%BF%9C%E6%9C%AA%E5%88%B0%E8%B4%A2%E6%94%BF%E8%B5%A4%E5%AD%97%E8%B4%A7%E5%B8%81%E5%8C%96%E7%9A%84%E5%9C%B0%E6%AD%A5/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 http://finance.sina.com.cn/zl/china/2020-05-18/zl-iirczymk2276930.shtml
  　意见领袖辩论财政赤字货币化
 　文 / 新浪财经意见领袖专栏（微信公众号 kopleader）专栏作家 曹远征
　中央银行要有独立的货币政策
　自从 1929-1933 年的大危机以后，宏观经济理论开始兴起。在 1929-1933 大危机前，欧美国家实行的是没有宏观经济管理的垄断竞争型的市场经济体制，反映在货币金融方面就是 “金本位制”。物价的高低取决于黄金的供应量。在社会生产规模一定的情况下，当黄金等贵金属的供应量突然上升，物价便随之上涨。当年西班牙在发现美洲新大陆后，拉美的黄金白银大量涌入欧洲，出现了欧洲经济史上的所谓 “价格革命”。它构成了货币数量论产生的历史背景。大卫 · 休谟和李嘉图曾是这一理论的代表，他们认为商品价格水平的涨落与货币数量成正比，货币价值高低与货币数量成反比。由此出现与货币数量多寡相关的物价变动，即通货膨胀。
曹远征
　但从全球更长的历史角度看，因发现新大陆而导致的黄金供应增长毕竟是短暂的，常态是黄金受制于自然条件而供应量是稳定的，进而物价是稳定的。换言之，在金本位条件下，不存在典型意义的 “通货膨胀” 式的物价上涨。但是，在 “金本位制” 下却存在一个大的问题，有通货紧缩的风险。受市场经济内在规律支配，市场的扩张赶不上生产的扩张，其结果会出现周期性的生产过剩，即经济危机。反映在金融市场上，危机前兆就是对现金，即对流动性的极度渴求。没有现金就不能支付，而支付的断裂是引致危机的导火索。受制于金本位制下稳定的黄金供应量，市场流动性不足是常态，从而也成为危机频繁发生的一个重要原因。也正是因此，现代宏观经济学的奠基著作是凯恩斯的《就业、利息和货币通论》。他从货币供应入手，提出了 “流动性陷阱” 问题。顺便指出，也是由于黄金的供应不能适应经济社会发展的需要并常常发生通货紧缩，金本位制退出历史舞台。
　凯恩斯的贡献更在于他把货币供应与就业问题联在一起。经济危机是就业不足，而失业问题意味着全社会总需求不足，而总需求是宏观层面的问题。换言之，只有在宏观层面提高总需求，才能反危机，才能熨平经济周期，它催生了宏观经济学。
　宏观经济学从全新的视角审视货币财政政策及其相应的宏观经济问题，认为可以通过宏观经济政策安排来影响总需求。在货币政策方面，缓解经济危机的道理在于：如果企业在负债经营、居民在负债消费的情况下，利息就是很重要的一个财务成本。当货币供应量增加，利息会随之下降，企业和居民的财务成本因之下降，居民就会提前消费、企业就会提前投资。于是，有效需求得以提升，达到反危机的目的。如果在经济过热时再反向操作，就可以熨平经济周期。在财政政策方面，通过扩张赤字来扩大财政开支或减税，也可以扩大总需求，从而达到反危机的目的。同理，在经济过热时反向操作，也可以熨平经济周期。由此，表现为侧重总需求管理的财政政策和货币政策构成了目前世界各国宏观经济管理政策基本框架。
　理论上，因金本位的流动性不足而被迫由流动性可以无限补充的信用本位取代，固然是历史趋势，但从货币数量论的角度观察，这仅是由过去的两因素，物价和货币供应量，变成了三因素，物价、货币供应量及货币流通速度（货币流通速度减缓，即为流动性迟滞），并未改变问题的性质，超过流通速度需要的货币供应量仍会引起典型的通货膨胀。于是，在上述宏观经济管理的政策框架实施过程中，人们始终有所忌惮。其中一个关键点，就是财政是不是可以无限透支中央银行？也就是当下人们所议论的，用印钞票买国债的办法来支持财政开支是否可行？是否可持续？
　从历史上看，这一政策在实践中是有恶性后果的。在国外，上世纪三十年代，德国恶性通货膨胀事件就是一个典型案例。一战后，德国由于要支付《凡尔赛和约》的战争赔款财政恶性透支中央银行，致使货币供应量失控，形成了天文数字的通货膨胀。
　历史的经验值得注意。不受黄金约束的信用本位，会因货币供应量过度而引发通货膨胀。从这个意义上讲，“货币数量论” 似乎有理由死灰复燃。它提醒人们适度而稳定货币供应机制是十分重要的。所谓适度就是当代货币数量论代表人物——弗里德曼提出的简单规则，即货币供应量应是 GDP 增速加物价自然上涨率之和；所谓机制就是一个约定俗成的限制，即财政不能无限透支中央银行。为此，要求中央银行有独立性，能制定独立于财政的货币政策。
　战后以来，各国宏观经济管理政策都基本遵循了这一点。尽管有时候货币支持财政，但始终认为财政和货币政策是相互独立的，至少是有隔离的，避免出现恶性的通货膨胀。或许由于历史上惨痛的教训，二次战后，各国财政与央行隔离做的最彻底的就是德国。它有较完备的独立的中央银行制度。因其中央银行的独立性在全球最高，其货币政策的决策不受经济形势和财政政策牵制，其唯一目标是反通货膨胀，保持币值稳定。
　通过政府加杠杆以抵挡金融危机
　在本世纪以前，人们基本的认识是货币政策和财政政策尽管目标一致，但至少操作上要相互独立。但是到了本世纪以后，出现了一个新问题——除了经济周期，还有金融周期。金融周期是以杠杆的伸缩为其特征的。当出现了快速地去杠杆就意味着可能引发各类资产负债表过分衰退，即金融危机。为此，需要应对金融周期，实施以控制杠杆率为主要目标，以金融监管为重要内容的宏观审慎管理。
　作为宏观审慎管理的一个重要方面，是紧急抢救安排。一旦出现在快速去杠杆的时候，就得用 “加杠杆” 的办法顶住“去杠杆”，避免资产负债表的过分衰退，引发金融危机。当居民资产负债表、企业资产负债表和金融资产负债表都在去杠杆的情况下，唯一的办法就是通过政府加杠杆来挡住金融危机。政府加杠杆就是通过包括拯救企业，资助居民等在内的扩大财政开支的办法来挽救局面。其中一个重要的结果便是赤字的增加，而弥补赤字的途径是发行国债。
　当社会资产负债表都在衰退、国债销售困难的情况下，为应对危机，中央银行便无奈地成为主要，甚至唯一的购买者。这就形成了 QE（量化宽松）货币政策。除将政策利率降为零甚至负数外，还要通过央行的资产负债表的扩张，来支持财政的国债的发行。此时，中央银行和财政就连在了一起，开始具有赤字货币化的迹象。顺便指出，也正是这种原因，在 2010 年欧债危机中，欧元区的许多国家开始诟病继承德国央行衣钵的欧央行的独立性。如希腊，指责欧央行过于死板，见死不救，不通融希腊发行欧元主权债。
　客观来讲，在过去的十年间，量化宽松货币政策是有效的，它挡住了杠杆的快速衰退。但与此同时，人们也对它心存疑虑，不仅担心通货膨胀，也担心杠杆再持续加长会不会出现新的问题？结论是，一旦到了一个相对满意的状况下，该政策就需要退出。在历史教训，殷鉴不远的背景下，各国从 2015 年开始，量化宽松的货币政策就在退出之中，其中一个主要表现为央行缩表。央行通过减少对国债的购买，同时不断地出售国债，逐渐缩小自身的资产负债表。央行缩表过程表明，人们认为央行扩张资产负债表来支持财政只是个暂时性的、抢救性的政策。危机过去之后，应该回到一个正常状态，财政和货币还应是独立的。也正是基于这一共识，“央行何时缩表？速度多快？怎么缩？” 一直是过去几年市场不断讨论的热点问题。</description>
    </item>
    
    <item>
      <title>动画图解 Git 命令，一看就懂</title>
      <link>/post/2020-05-14-%E5%8A%A8%E7%94%BB%E5%9B%BE%E8%A7%A3-git-%E5%91%BD%E4%BB%A4%E4%B8%80%E7%9C%8B%E5%B0%B1%E6%87%82/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-05-14-%E5%8A%A8%E7%94%BB%E5%9B%BE%E8%A7%A3-git-%E5%91%BD%E4%BB%A4%E4%B8%80%E7%9C%8B%E5%B0%B1%E6%87%82/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 https://segmentfault.com/a/1190000022404482
 无论是开发、运维，还是测试，大家都知道 Git 在日常工作中的地位。所以，也是大家的必学、必备技能之一。之前公众号也发过很多 git 相关的文章。
但是呢，民工哥，也经常在后台看到读者说，命令太多了不好记啊，时间长了不用又忘记了等等的吐槽。是啊，要学一门技术真难，何况现在技术更新、迭代这么快&amp;hellip;..
所以，对于学习 Git 这门技术，要是有一个一看就懂，一学就会的入门资料就好了。前不久，国外的一位小姐姐写了一篇这样的文章《CS Visualized: Useful Git Commands》。作者是来自英属哥伦比亚的小姐姐 Lydia Hallie，在这篇文章里面，她通过生动形象的动画，以更加直观的方式，向开发者展示 Git 命令中的 merge、rebase、reset、revert、cherry-pick 等常用骚操作的具体原理。
下面就给大家带来一些实例分享：
1、git merge
fast-forward 模式
no-fast-forward 模式
合并冲突修复的过程 ，动画演示如下：
2、git rebase
git rebase 指令会复制当前分支的所有最新提交，然后将这些提交添加到指定分支提交记录之上。
git rebase 还提供了 6 种操作模式：
 reword：修改提交信息 edit：修改此提交 squash：将当前提交合并到之前的提交中 fixup：将当前提交合并到之前的提交中，不保留提交日志消息 exec：在每一个需要变基的提交上执行一条命令 drop：删除提交  以 drop 为例：
以 squash 为例：
3、git reset
以下图为例：9e78i 提交添加了 style.css 文件，035cc 提交添加了 index.js 文件。使用软重置，我们可以撤销提交记录，但是保留新建的 style.css 和 index.</description>
    </item>
    
    <item>
      <title>我们穷极一生，究竟追寻的是什么</title>
      <link>/post/2020-05-14-%E6%88%91%E4%BB%AC%E7%A9%B7%E6%9E%81%E4%B8%80%E7%94%9F%E7%A9%B6%E7%AB%9F%E8%BF%BD%E5%AF%BB%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-05-14-%E6%88%91%E4%BB%AC%E7%A9%B7%E6%9E%81%E4%B8%80%E7%94%9F%E7%A9%B6%E7%AB%9F%E8%BF%BD%E5%AF%BB%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 https://www.zhihu.com/question/384441334/answer/1148006120 非流
  王羲之说：夫人之相与，俯仰一世，或取诸怀抱，悟言一室之内；或因寄所托，放浪形骸之外。
 人这一生，如昙花一现。如草木春绿秋枯，如曦月东升西落。
但偏偏这一生欲望却有很多。
小时候溪头卧剥莲蓬，忙趁东风放纸鸢，急走追黄蝶，也傍桑阴学种瓜，归来饱饭黄昏后，不脱蓑衣卧月明。
长大后希望金榜题名，希望有佳人相伴，希望钱财不断，希望节节高升，希望高朋满座，希望夜夜笙歌。
老了又想要健康长寿，僮仆欢迎，稚子候门，有一盘棋，一知己，一壶酒，一庭院，安享天伦。
 你看世人慌慌张张，不过图碎银几两。偏偏这碎银几两，能解世间万种惆怅。
 有一大半的人还在为生活挣扎，哪里有时间去寻找意义？
其实人这一生，不过是一场体验，就和草木，日月一样，体验这欲望的轮回。
活不明白就会觉得，寄蜉蝣于天地，渺沧海之一粟。哀吾生之须臾，羡长江之无穷。活明白了就会欣于所遇，暂得于己，快然自足，不知老之将至。
你可以追求这金钱名利，你也可以追求诗酒花茶，你可以追求江上之清风，也可以追求山间之明月。
但是不用过分在意追求的结果，结果终将逝去。
穷极一生，来到人间，尽可能的体验世间的喜怒哀乐，生老病死。
很喜欢大鱼海棠的这句话。
 我们这一生很短，我们终将会失去它，所以不妨大胆一点， 爱一个人，攀一座山，追一次梦，不妨大胆一点，有很多事没有答案。
 很喜欢《兰亭集序》和《赤壁赋》。
 每览昔人兴感之由，若合一契，未尝不临文嗟悼，不能喻之于怀。固知一死生为虚诞，齐彭殇为妄作。后之视今，亦犹今之视昔。悲夫！
 故写此文，记录所感，虽世殊事异，所以兴怀，其致一也。
后之览者，亦将有感于斯文。
人生得意须尽欢，于是饮酒乐甚，扣舷而歌之。
歌曰：
 小楼一夜听春雨，深巷明朝卖杏花。
 曹哲
自由。
我们追求富有，不过是为了不为金钱所束缚。
我们追求地位，不过是为了不为权势所束缚。
我们追求知识，不过是为了不为愚昧所束缚。
我们追求健康，不过是为了不为疾病所束缚。
人终其一生，追求的不过是「做自己想做的事」而已，我们想从事喜欢的职业，想去喜欢的地方，想和喜欢的人相守一生，都是如此。
有人说「我们不要自由，只要富有就够了，只要安全就够了」。
可是不能购买自己想要的东西，你有金山银山又有什么用？
不能去做喜欢的事情，空活百年也只是把同一天重复三万次而已。
那些喊着「我们不需要自由」的人，可能只是在幻想自己有「剥夺别人自由」的自由吧 = =</description>
    </item>
    
    <item>
      <title>Markdown语法</title>
      <link>/post/2020-05-11-markdown%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-05-11-markdown%E8%AF%AD%E6%B3%95/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>留学生回来报效祖国，却惨遭。。。</title>
      <link>/post/2020-05-01-%E7%95%99%E5%AD%A6%E7%94%9F%E5%9B%9E%E6%9D%A5%E6%8A%A5%E6%95%88%E7%A5%96%E5%9B%BD/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-05-01-%E7%95%99%E5%AD%A6%E7%94%9F%E5%9B%9E%E6%9D%A5%E6%8A%A5%E6%95%88%E7%A5%96%E5%9B%BD/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>留学生回国航班被取消，近一个月不敢出门，他想对大家说</title>
      <link>/post/2020-04-04-%E7%95%99%E5%AD%A6%E7%94%9F%E6%AF%95%E4%B8%9A%E5%90%8E%E8%88%AA%E7%8F%AD%E8%A2%AB%E5%8F%96%E6%B6%88%E4%BB%96%E6%83%B3%E5%AF%B9%E5%A4%A7%E5%AE%B6%E8%AF%B4/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-04-04-%E7%95%99%E5%AD%A6%E7%94%9F%E6%AF%95%E4%B8%9A%E5%90%8E%E8%88%AA%E7%8F%AD%E8%A2%AB%E5%8F%96%E6%B6%88%E4%BB%96%E6%83%B3%E5%AF%B9%E5%A4%A7%E5%AE%B6%E8%AF%B4/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>币圈那些公开的秘密</title>
      <link>/post/2020-02-29-%E5%B8%81%E5%9C%88%E9%82%A3%E4%BA%9B%E5%85%AC%E5%BC%80%E7%9A%84%E7%A7%98%E5%AF%86/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-02-29-%E5%B8%81%E5%9C%88%E9%82%A3%E4%BA%9B%E5%85%AC%E5%BC%80%E7%9A%84%E7%A7%98%E5%AF%86/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>孤岛求生The Island 第一季 全集</title>
      <link>/post/2015-06-06-%E5%AD%A4%E5%B2%9B%E6%B1%82%E7%94%9F/</link>
      <pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-06-06-%E5%AD%A4%E5%B2%9B%E6%B1%82%E7%94%9F/</guid>
      <description> </description>
    </item>
    
  </channel>
</rss>