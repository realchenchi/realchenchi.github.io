<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on 马野先生</title>
    <link>/tags/git/</link>
    <description>Recent content in Git on 马野先生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Mon, 13 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git Fetch &amp; Pull 详解</title>
      <link>/post/2020-07-13-git-fetch-pull-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-07-13-git-fetch-pull-%E8%AF%A6%E8%A7%A3/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 www.cnblogs.com
 1、简单概括 先用一张图来理一下git fetch和git pull的概念：
可以简单的概括为：
git fetch是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中。
而git pull则是将远程主机的最新内容拉下来后直接合并，即：git pull = git fetch + git merge，这样可能会产生冲突，需要手动解决。
下面我们来详细了解一下git fetch和git pull的用法。
2、分支的概念 在介绍两种方法之前，我们需要先了解一下分支的概念： 分支是用来标记特定代码的提交，每一个分支通过 SHA1sum 值来标识，所以对分支的操作是轻量级的，你改变的仅仅是 SHA1sum 值。
如下图所示，当前有 2 个分支，A,C,E 属于 master 分支，而 A,B，D,F 属于 dev 分支。
A----C----E（master） \  B---D---F(dev) 它们的 head 指针分别指向 E 和 F，对上述做如下操作：
git checkout master //选择or切换到master分支 git merge dev //将dev分支合并到当前分支(master)中 合并完成后：
A---C---E---G(master) \  / B---D---F（dev） 现在 ABCDEFG 属于 master，G 是一次合并后的结果，是将 E 和Ｆ的代码合并后的结果，可能会出现冲突。而 ABDF 依然属于 dev 分支。可以继续在 dev 的分支上进行开发:</description>
    </item>
    
    <item>
      <title>Git Rebase 原理</title>
      <link>/post/2020-07-13-git-rebase-%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-07-13-git-rebase-%E5%8E%9F%E7%90%86/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 segmentfault.com
  原文地址
Git 系列文章地址
 本文主要讲解下 Git Rebase 的基本概念用法、其内部原理以及我们在真实项目中使用 Git Rebase 应该遵循的原则以及为啥需要遵循这些原则。
相信对于 rebase 肯定不会陌生，就好像上图描述的过程一样，当你使用 rebase 命令的时候，即好像将你需要去 rebase 的分支拔下来然后重新插到另一个分支上。官方对于 rebase 的描述为：
“git-rebase: Forward-port local commits to the updated upstream head”— git doc 翻译一下，就是讲你在某个分支上的所有提交记录移花接木到另一个分支上。这边需要强调一个概念：reapply，使用 rebase 并不是简单地好像你用 ctrl-x/ctrl-v 进行剪切复制一样，rebase 会依次地将你所要操作的分支的所有提交应用到目标分支上。也就是说，实际上在执行 rebase 的时候，有两个隐含的注意点：
  在重放之前的提交的时候，Git 会创建新的提交，也就是说即使你重放的提交与之前的一模一样 Git 也会将之当做新的独立的提交进行处理。
  Git rebase 并不会删除老的提交，也就是说你在对某个分支执行了 rebase 操作之后，老的提交仍然会存放在. git 文件夹的 objects 目录下。如果你对于 Git 是如何存放你的提交不太了解的话可以参考这篇文章：Understanding git for real by exploring the .</description>
    </item>
    
    <item>
      <title>动画图解 Git 命令，一看就懂</title>
      <link>/post/2020-05-14-%E5%8A%A8%E7%94%BB%E5%9B%BE%E8%A7%A3-git-%E5%91%BD%E4%BB%A4%E4%B8%80%E7%9C%8B%E5%B0%B1%E6%87%82/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-05-14-%E5%8A%A8%E7%94%BB%E5%9B%BE%E8%A7%A3-git-%E5%91%BD%E4%BB%A4%E4%B8%80%E7%9C%8B%E5%B0%B1%E6%87%82/</guid>
      <description>本文由 简悦 SimpRead 转码， 原文地址 https://segmentfault.com/a/1190000022404482
 无论是开发、运维，还是测试，大家都知道 Git 在日常工作中的地位。所以，也是大家的必学、必备技能之一。之前公众号也发过很多 git 相关的文章。
但是呢，民工哥，也经常在后台看到读者说，命令太多了不好记啊，时间长了不用又忘记了等等的吐槽。是啊，要学一门技术真难，何况现在技术更新、迭代这么快&amp;hellip;..
所以，对于学习 Git 这门技术，要是有一个一看就懂，一学就会的入门资料就好了。前不久，国外的一位小姐姐写了一篇这样的文章《CS Visualized: Useful Git Commands》。作者是来自英属哥伦比亚的小姐姐 Lydia Hallie，在这篇文章里面，她通过生动形象的动画，以更加直观的方式，向开发者展示 Git 命令中的 merge、rebase、reset、revert、cherry-pick 等常用骚操作的具体原理。
下面就给大家带来一些实例分享：
1、git merge
fast-forward 模式
no-fast-forward 模式
合并冲突修复的过程 ，动画演示如下：
2、git rebase
git rebase 指令会复制当前分支的所有最新提交，然后将这些提交添加到指定分支提交记录之上。
git rebase 还提供了 6 种操作模式：
 reword：修改提交信息 edit：修改此提交 squash：将当前提交合并到之前的提交中 fixup：将当前提交合并到之前的提交中，不保留提交日志消息 exec：在每一个需要变基的提交上执行一条命令 drop：删除提交  以 drop 为例：
以 squash 为例：
3、git reset
以下图为例：9e78i 提交添加了 style.css 文件，035cc 提交添加了 index.js 文件。使用软重置，我们可以撤销提交记录，但是保留新建的 style.css 和 index.</description>
    </item>
    
  </channel>
</rss>